---
import { type CollectionEntry, getCollection } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';

import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import TableOfContents from '../../components/TableOfContents.astro';
import ScrollToTop from '../../components/ScrollToTop.astro';

interface Props {
	entry: CollectionEntry<'work'>;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
	const work = await getCollection('work');
	return work.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// Function to determine the icon for a given link
function getLinkIcon(url: string) {
	if (url.includes("github.com")) return "github-logo";
	if (url.includes("youtube.com")) return "youtube-logo";
	return "live-external";
}
---


{ entry ? (<BaseLayout title={entry.data.title} description={entry.data.description}>
	<div class="stack gap-20">
		<div class="stack gap-15">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href="/work/"><Icon icon="arrow-left" /> Work</a>
					<Hero title={entry.data.title} align="start">
						<div class="details">
							<div class="tags">
								{entry.data.tags.map((t) => <Pill>{t}</Pill>)}
							</div>
							<p class="description">{entry.data.description}</p>
						</div>
						<div style="display: flex; align-items: center; justify-content: center;">
							{entry.data.links && (
								<div class="link-buttons">
									{entry.data.links.map((link) => (
										<a href={link.startsWith('http') ? link : 'https://' + link} target="_blank" rel="noopener noreferrer" class="link-button">
											<Icon icon={getLinkIcon(link)} />
												{link.includes('github.com') ? 'GitHub' :
												 link.includes('youtube.com') ? 'YouTube' : 'Visit'}
											</a>
									))}
								</div>
							)}
						</div>
					</Hero>
				</div>
			</header>
			<main class="wrapper">
				<div class="content-wrapper">
					<TableOfContents headings={headings}  />
					<div class="stack gap-10 content">
						{entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''} />}
						<div class="content">
							<Content />
						</div>
					</div>
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
	<ScrollToTop />
</BaseLayout>) : (
	<BaseLayout title="Not Found" description="The requested work entry was not found.">
		<div class="wrapper">
			<h1>404: Not Found</h1>
			<p>The requested work entry could not be found.</p>
			<a href="/work/">Back to Work</a>
		</div>
	</BaseLayout>
)}

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.wrapper {
		width: 100%;
	}

	.content-wrapper {
		display: flex;
		gap: 2rem;
	}

	.table-of-contents {
		flex: 0 0 25%;
	}

	.content {
		flex: 1;
		max-width: 75%;
	}

	@media (max-width: 72em) {
		.content-wrapper {
			flex-direction: column;
		}

		.content {
			max-width: 100%;
		}
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}

	.table-of-contents {
		position: sticky;
		top: 2rem;
		align-self: flex-start;
		width: 25%;
		max-height: calc(100vh - 4rem);
		overflow-y: auto;
		padding-right: 1rem;
		border-right: 1px solid var(--gray-800);
		text-align: left;
	}

	.table-of-contents.sticky {
		position: fixed;
		top: 2rem;
	}

	h2 {
		font-size: var(--text-lg);
		margin-bottom: 0.5rem;
	}

	ul {
		list-style-type: none;
		padding: 0;
		margin: 0;
	}

	li {
		margin-bottom: 0.5rem;
	}

	a {
		color: var(--gray-300);
		text-decoration: none;
		transition: color 0.2s ease;
	}

	a:hover {
		color: var(--gray-0);
	}

	.depth-2 { padding-left: 0; }
	.depth-3 { padding-left: 1rem; }
	.depth-4 { padding-left: 2rem; }
	.depth-5 { padding-left: 3rem; }
	.depth-6 { padding-left: 4rem; }

	@media (max-width: 72em) {
		.table-of-contents {
			display: none;
		}
	}

	.content-wrapper {
		display: flex;
		gap: 2rem;
	}

	.content {
		flex: 1;
		max-width: 75%;
	}

	@media (max-width: 72em) {
		.content-wrapper {
			flex-direction: column;
		}

		.content {
			max-width: 100%;
		}
	}

	.link-buttons {
	display: flex;
	gap: 1rem;
	margin-top: 1rem;
	}

	.link-button {
	display: inline-flex;
	align-items: center;
	gap: 0.5rem;
	padding: 0.5rem 1rem;
	background-color: var(--gray-800);
	color: var(--gray-200);
	border-radius: 0.5rem;
	text-decoration: none;
	transition: background-color 0.2s ease;
	}

	.link-button:hover {
	background-color: var(--gray-700);
	}

	.link-button svg {
	width: 1.25em;
	height: 1.25em;
	}
</style>

<script>
	// const tableOfContents = document.querySelector('.table-of-contents');
	// const header = document.querySelector('header');

	// if (tableOfContents && header) {
	// 	const observer = new IntersectionObserver(([entry]) => {
	// 		if (entry && entry.isIntersecting) {
	// 			tableOfContents.classList.remove('sticky');
	// 		} else {
	// 			tableOfContents.classList.add('sticky');
	// 		}
	// 	});

	// 	observer.observe(header);
	// }
</script>